{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BNavbar, BNavbarBrand } from 'bootstrap-vue';\nexport default {\n  components: {\n    BNavbar: BNavbar,\n    BNavbarBrand: BNavbarBrand\n  },\n  data: function data() {\n    var appName = '';\n    return {\n      appName: appName,\n      pesoFrete: null,\n      pesoAnt: 0,\n      exibirAviso: false,\n      cidadeSelecionada: '',\n      cidades: [],\n      freteBarato: null,\n      freteRapido: null,\n      apiData: []\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.appName = 'Melhor Frete';\n    var apiUrl = 'http://localhost:3000/transport'; // Fetch nos dados da API\n\n    fetch(apiUrl).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      // Armazenando o dataset em uma variável para utilização nos methods.\n      _this.apiData = data; // Retornando as cidades únicas para o objeto cidades e formatando os dados para tipo Float/Inteiro.\n\n      var cidadesUnicas = {};\n\n      for (var i = 0; i < data.length; i++) {\n        var obj = data[i];\n        cidadesUnicas[obj.city] = true;\n        _this.apiData[i].cost_transport_light = parseFloat(_this.apiData[i].cost_transport_light.replace(/[^0-9.]/g, ''));\n        _this.apiData[i].cost_transport_heavy = parseFloat(_this.apiData[i].cost_transport_heavy.replace(/[^0-9.]/g, ''));\n        _this.apiData[i].lead_time = parseInt(_this.apiData[i].lead_time);\n      }\n\n      _this.cidades = Object.keys(cidadesUnicas);\n    }).catch(function (error) {\n      console.error('Erro ao obter dados do frete:', error);\n    });\n  },\n  watch: {\n    pesoFrete: function pesoFrete(newValue) {\n      this.pesoFrete = parseFloat(newValue);\n    }\n  },\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    methodFoo: function methodFoo() {\n      var _this2 = this;\n\n      // Filtrando para pegar somente a cidade selecionada.\n      var freteFiltrado = this.apiData.filter(function (frete) {\n        return frete.city === _this2.cidadeSelecionada;\n      });\n      console.log(freteFiltrado); // Definição do peso baseado no input.\n\n      this.pesoAnt = this.pesoFrete; // Função sort para menor preço, dividindo em pesos.\n\n      if (this.pesoAnt <= 100) {\n        freteFiltrado.sort(function (a, b) {\n          return a.cost_transport_light - b.cost_transport_light;\n        });\n        this.freteBarato = freteFiltrado[0];\n      } else if (this.pesoAnt > 100) {\n        freteFiltrado.sort(function (a, b) {\n          return a.cost_transport_heavy - b.cost_transport_heavy;\n        });\n        this.freteBarato = freteFiltrado[0];\n      } // Função sort para menor tempo.\n\n\n      freteFiltrado.sort(function (a, b) {\n        return a.lead_time - b.lead_time;\n      });\n      this.freteRapido = freteFiltrado[0];\n\n      if (!this.cidadeSelecionada || !this.pesoAnt) {\n        this.exibirAviso = true;\n      }\n\n      console.log(this.freteRapido);\n    },\n    // Método para formatar o custo total economico.\n    formatarCustoTotalEconomica: function formatarCustoTotalEconomica() {\n      var custoTotal;\n\n      if (this.pesoAnt <= 100) {\n        custoTotal = this.freteBarato.cost_transport_light * this.pesoAnt;\n        return custoTotal.toFixed(2);\n      } else if (this.pesoAnt > 100) {\n        custoTotal = this.freteBarato.cost_transport_heavy * this.pesoAnt;\n        return custoTotal.toFixed(2);\n      } // Método para formatar o custo total frete rápido.\n\n    },\n    formatarCustoTotalRapida: function formatarCustoTotalRapida() {\n      var custoTotal;\n\n      if (this.pesoAnt <= 100) {\n        custoTotal = this.freteRapido.cost_transport_light * this.pesoAnt;\n        return custoTotal.toFixed(2);\n      } else if (this.pesoAnt > 100) {\n        custoTotal = this.freteRapido.cost_transport_heavy * this.pesoAnt;\n        return custoTotal.toFixed(2);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmFA,SACAA,OADA,EAEAC,YAFA,QAGA,eAHA;AAKA;AACAC;AACAF,oBADA;AAEAC;AAFA,GADA;AAKAE,MALA,kBAKA;AACA;AAEA;AACAC,sBADA;AAEAC,qBAFA;AAGAC,gBAHA;AAIAC,wBAJA;AAKAC,2BALA;AAMAC,iBANA;AAOAC,uBAPA;AAQAC,uBARA;AASAC;AATA;AAWA,GAnBA;AAoBAC,SApBA,qBAoBA;AAAA;;AACA;AACA,mDAFA,CAIA;;AACAC,kBACAC,IADA,CACA;AAAA;AAAA,KADA,EAEAA,IAFA,CAEA;AAEA;AACA,2BAHA,CAKA;;AACA;;AACA;AACA;AACAC;AACA;AACA;AACA;AACA;;AAEA;AAEA,KAnBA,EAoBAC,KApBA,CAoBA;AACAC;AACA,KAtBA;AAuBA,GAhDA;AAkDAC;AACAd,aADA,qBACAe,QADA,EACA;AACA;AACA;AAHA,GAlDA;AAuDAC;AACA;AACAC,aAFA,uBAEA;AAAA;;AACA;AACA;AAAA;AAAA;AACAJ,iCAHA,CAIA;;AACA,oCALA,CAMA;;AACA;AACAK;AAAA;AAAA;AACA;AAEA,OAJA,MAKA;AACAA;AAAA;AAAA;AACA;AACA,OAfA,CAgBA;;;AACAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AACAL;AACA,KA1BA;AA2BA;AACAM,+BA5BA,yCA4BA;AACA;;AACA;AACAC;AAEA;AACA,OAJA,MAKA;AACAA;AAEA;AACA,OAXA,CAYA;;AACA,KAzCA;AA0CAC,4BA1CA,sCA0CA;AACA;;AACA;AACAD;AAEA;AACA,OAJA,MAKA;AACAA;AAEA;AACA;AAEA;AAvDA;AAvDA","names":["BNavbar","BNavbarBrand","components","data","appName","pesoFrete","pesoAnt","exibirAviso","cidadeSelecionada","cidades","freteBarato","freteRapido","apiData","created","fetch","then","cidadesUnicas","catch","console","watch","newValue","methods","methodFoo","freteFiltrado","formatarCustoTotalEconomica","custoTotal","formatarCustoTotalRapida"],"sourceRoot":"src/components","sources":["BestTransport.vue"],"sourcesContent":["<template>\n  <div class=\"title\"> \n    <b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">\n      <b-navbar-brand class=\"ml-2\">\n      </b-navbar-brand>\n    </b-navbar>\n    <div class=\"grid\">\n      <div class=\"navfrete\">\n        <img class=\"logo\" src=\"../assets/logo.png\">\n        <h1>{{ appName }}</h1></div>\n\n<div class=\"formulario\">\n\n    <div class=\"form-group\">\n          <h2><img class=\"maplogo\" src=\"../assets/maplogo.svg\"> Insira o destino e o peso</h2>\n      <label for=\"city\"><b>Cidade de destino:</b></label>\n      <select id=\"city\" class=\"form-control\" v-model=\"cidadeSelecionada\">\n        <option class='first-option' disabled selected value=\"\">Selecione o destino</option>\n        <option v-for=\"city in cidades\" :key=\"city\"> {{ city }}</option>\n      </select>\n    </div>\n    <div class=\"form-group\">\n      <label for=\"peso\"><b>Peso do frete:</b></label>\n      <input type=\"number\" id=\"peso\" class=\"form-control\" placeholder=\"Peso da carga em kg\" v-model=\"pesoFrete\">\n    </div>\n    <button class=\"btn btn-primary\" @click=\"methodFoo\">Analisar</button>\n\n      </div>\n    <div class=\"resultados\">\n\n    <!-- Divisão com v-if para peso, e tipo de frete. -->\n    <transition>\n    <div v-if=\"freteBarato && pesoAnt <= 100\">\n    <h2>Frete mais econômico:</h2>\n    <p>Transportadora: {{freteBarato.name}}</p>\n    <p>Custo total: R${{ formatarCustoTotalEconomica() }}</p>\n    <p>Tempo de entrega: {{ freteBarato.lead_time}} horas</p>\n    </div>\n    </transition>\n\n    <transition>\n    <div v-if=\"freteBarato && pesoAnt > 100\">\n      <h2>Frete mais econômico:</h2>\n      <p>Transportadora: {{freteBarato.name}}</p>\n      <p>Custo total: R$ {{ formatarCustoTotalEconomica()}}</p>\n      <p>Tempo de entrega: {{freteBarato.lead_time}} horas</p>\n    </div>\n    </transition>\n    <transition>\n    <div v-if=\"freteRapido && pesoAnt > 100\">\n      <h2>Frete mais rápido:</h2>\n      <p>Transportadora: {{freteRapido.name}}</p>\n      <p>Custo total: R$ {{ formatarCustoTotalRapida()}}</p>\n      <p>Tempo de entrega: {{freteRapido.lead_time}} horas</p>\n    </div>\n    </transition>\n    <transition>\n    <div v-if=\"freteRapido && pesoAnt <= 100\">\n      <h2>Frete mais rápido:</h2>\n      <p>Transportadora: {{freteRapido.name}}</p>\n      <p>Custo total: R$ {{ formatarCustoTotalRapida()}}</p>\n      <p>Tempo de entrega: {{freteRapido.lead_time}} horas</p>\n    </div>\n    </transition>\n    <transition>\n    <div v-if=\"exibirAviso\" class=\"aviso\">\n\n          <img src=\"../assets/warning.svg\">\n          <h3>Insira os valores para realizar a análise.</h3>\n          <button>Fechar</button>\n        </div>\n    </transition>\n    <div v-if=\"!freteRapido || !exibirAviso\">\n          <h2>Nenhum dado selecionado.</h2>\n        </div>\n   </div> \n  </div>\n  </div>\n\n\n</template>\n\n<script>\nimport {\n  BNavbar,\n  BNavbarBrand,\n} from 'bootstrap-vue'\n\nexport default {\n  components: {\n    BNavbar,\n    BNavbarBrand,\n  },\n  data() {\n    const appName = ''\n\n    return {\n      appName,\n      pesoFrete: null,\n      pesoAnt: 0,\n      exibirAviso: false,\n      cidadeSelecionada: '',\n      cidades: [],\n      freteBarato: null,\n      freteRapido: null,\n      apiData: [],\n    }\n  },\n  created() {\n    this.appName = 'Melhor Frete'\n    const apiUrl = 'http://localhost:3000/transport'\n\n    // Fetch nos dados da API\n    fetch (apiUrl)\n    .then (response => response.json())\n    .then(data =>{\n\n        // Armazenando o dataset em uma variável para utilização nos methods.\n        this.apiData = data;\n\n        // Retornando as cidades únicas para o objeto cidades e formatando os dados para tipo Float/Inteiro.\n        let cidadesUnicas = {};\n        for (let i = 0; i < data.length; i++){\n          let obj = data[i];\n          cidadesUnicas[obj.city] = true;\n          this.apiData[i].cost_transport_light = parseFloat(this.apiData[i].cost_transport_light.replace(/[^0-9.]/g, ''))\n          this.apiData[i].cost_transport_heavy = parseFloat(this.apiData[i].cost_transport_heavy.replace(/[^0-9.]/g, ''))\n          this.apiData[i].lead_time = parseInt(this.apiData[i].lead_time)\n        }\n\n        this.cidades = Object.keys(cidadesUnicas);\n        \n})\n    .catch(error =>{\n        console.error('Erro ao obter dados do frete:', error);\n      })\n  },\n\n  watch: {\n  pesoFrete(newValue) {\n    this.pesoFrete = parseFloat(newValue);\n  }\n  },\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    methodFoo() {\n      // Filtrando para pegar somente a cidade selecionada.\n      const freteFiltrado = this.apiData.filter(frete => frete.city === this.cidadeSelecionada)\n      console.log(freteFiltrado)\n      // Definição do peso baseado no input.\n      this.pesoAnt = this.pesoFrete\n      // Função sort para menor preço, dividindo em pesos.\n      if (this.pesoAnt <= 100){\n        freteFiltrado.sort((a, b) => a.cost_transport_light - b.cost_transport_light)\n        this.freteBarato = freteFiltrado[0];\n\n      }\n      else if (this.pesoAnt > 100){\n        freteFiltrado.sort((a, b) => a.cost_transport_heavy - b.cost_transport_heavy)\n        this.freteBarato = freteFiltrado[0];\n      }\n      // Função sort para menor tempo.\n      freteFiltrado.sort((a, b) => a.lead_time - b.lead_time)\n      this.freteRapido = freteFiltrado[0];\n\n      if (!this.cidadeSelecionada || !this.pesoAnt){\n        this.exibirAviso = true;\n      }\n      console.log(this.freteRapido);\n    },\n    // Método para formatar o custo total economico.\n    formatarCustoTotalEconomica() {\n      let custoTotal;\n      if (this.pesoAnt <= 100){\n      custoTotal = this.freteBarato.cost_transport_light * this.pesoAnt;\n\n      return custoTotal.toFixed(2);\n      }\n      else if (this.pesoAnt > 100){\n      custoTotal = this.freteBarato.cost_transport_heavy * this.pesoAnt\n        \n      return custoTotal.toFixed(2);\n      }\n    // Método para formatar o custo total frete rápido.\n    },\n    formatarCustoTotalRapida() {\n      let custoTotal;\n      if (this.pesoAnt <= 100){\n      custoTotal = this.freteRapido.cost_transport_light * this.pesoAnt;\n\n      return custoTotal.toFixed(2);\n      }\n      else if (this.pesoAnt > 100){\n      custoTotal = this.freteRapido.cost_transport_heavy * this.pesoAnt\n        \n      return custoTotal.toFixed(2);\n      }\n\n    }\n  },\n}\n</script>\n\n<style scoped>\nhtml{\n  background-color: #f2f2f2;\n}\n.title .navbar {\n  background-color: #596c8a !important;\n}\n\n.title .navbar-brand {\n  margin-left: 20px;\n}\n.navbar{\n  height: 5vh;\n}\n\n.grid{\n  height: 80vh;\n  margin: 40px auto;\n  width: 1500px;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  display: grid;\n  grid-template-rows: 1fr 14fr;\n  grid-template-columns: 1fr 2fr;\n  align-items: center;\n}\n\n.formulario, .resultado{\n  margin: 40px 20px;\n}\n.formulario {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 90%;\n  width: 500px;\n  gap: 40px;\n  background: #f2f2f2;\n  border-radius: 10px;\n}\n.formulario input, .formulario select{\n  width: 400px;\n}\n.formulario button{\n  width: 200px;\n  background-color: #7195bf;\n  color: #363636;\n  font-weight: bolder;\n  border: none;\n}\n\n.aviso button{\n  width: 200px;\n  height: 30px;\n  background-color: #7195bf;\n  color: #363636;\n  font-weight: bolder;\n  border: none;\n  border-radius: 5px;\n}\n.resultados{\n  justify-self: center;\n}\n.navfrete{\n  display: flex;\n  align-items: center;\n  grid-column: span 2;\n  font-weight: bolder;\n  color: white;\n  width: 100%;\n  height: 6vh;\n  background-color: #7195bf;\n  border-radius: 10px 10px 0px 0px;\n  align-self: start;\n}\n\n.navfrete h1, .logo{\n  margin-left: 40px;\n}\nh1{\n  font-size: 32px;\n}\n\nh2{\n  font-size: 28px;\n  margin-bottom: 30px;\n  color: #363636;\n}\n\nh3{\n  font-size: 24px;\n}\n.navfrete h1{\n  height: 30px;\n  color: black;\n}\n.logo{\n  width: 50px;\n  height: 50px;\n}\n.maplogo{\n  width: 40px;\n  height: 40px;\n}\n\nlabel{\n  margin-bottom: 10px;\n  color: #505059;\n}\nselect {\n  background-image:\n    linear-gradient(45deg, transparent 50%, gray 50%),\n    linear-gradient(135deg, gray 50%, transparent 50%),\n    linear-gradient(to right, #ccc, #ccc);\n  background-position:\n    calc(100% - 20px) calc(1em + 2px),\n    calc(100% - 15px) calc(1em + 2px),\n    calc(100% - 2.5em) 0.5em;\n  background-size:\n    5px 5px,\n    5px 5px,\n    1px 1.5em;\n  background-repeat: no-repeat;\n}\n\nselect:focus {\n  background-image:\n    linear-gradient(45deg, green 50%, transparent 50%),\n    linear-gradient(135deg, transparent 50%, green 50%),\n    linear-gradient(to right, #ccc, #ccc);\n  background-position:\n    calc(100% - 15px) 1em,\n    calc(100% - 20px) 1em,\n    calc(100% - 2.5em) 0.5em;\n  background-size:\n    5px 5px,\n    5px 5px,\n    1px 1.5em;\n  background-repeat: no-repeat;\n  border-color: green;\n  outline: 0;\n}\n\n.first-option{\n  color: gray;\n}\n\n.aviso{\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  background-color: #fff;\n  border-radius: 10px;\n  gap: 30px;\n  flex-direction: column;\n  width: 750px;\n  height: 375px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n.v-enter-active,\n.v-leave-active{\n  transition: opacity 2s;\n}\n\n.v-enter{\n  opacity: 0;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}