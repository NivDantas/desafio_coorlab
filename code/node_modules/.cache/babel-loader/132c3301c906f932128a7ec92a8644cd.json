{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { BNavbar, BNavbarBrand } from \"bootstrap-vue\";\nexport default {\n  components: {\n    BNavbar: BNavbar,\n    BNavbarBrand: BNavbarBrand\n  },\n  data: function data() {\n    var appName = \"\";\n    return {\n      appName: appName,\n      pesoTempoReal: null,\n      peso: null,\n      exibirAviso: false,\n      cidadeSelecionada: \"\",\n      cidades: [],\n      freteBarato: null,\n      freteRapido: null,\n      apiData: []\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.appName = \"Melhor Frete\";\n    var apiUrl = \"http://localhost:3000/transport\"; // Fetch nos dados da API\n\n    fetch(apiUrl).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      // Armazenando o dataset em uma variável para utilização nos methods.\n      _this.apiData = data; // Retornando as cidades únicas para o objeto cidades e formatando os dados para tipo Float/Inteiro.\n\n      var cidadesUnicas = {};\n\n      for (var i = 0; i < data.length; i++) {\n        var obj = data[i];\n        cidadesUnicas[obj.city] = true;\n        _this.apiData[i].cost_transport_light = parseFloat(_this.apiData[i].cost_transport_light.replace(/[^0-9.]/g, \"\"));\n        _this.apiData[i].cost_transport_heavy = parseFloat(_this.apiData[i].cost_transport_heavy.replace(/[^0-9.]/g, \"\"));\n        _this.apiData[i].lead_time = parseInt(_this.apiData[i].lead_time);\n      } // Pegando cidades únicas para valor do formulário.\n\n\n      _this.cidades = Object.keys(cidadesUnicas);\n    }).catch(function (error) {\n      console.error(\"Erro ao obter dados do frete:\", error);\n    });\n  },\n  watch: {\n    // Ver as mudanças do peso em tempo real.\n    pesoTempoReal: function pesoTempoReal(newValue) {\n      this.pesoTempoReal = parseFloat(newValue);\n    }\n  },\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    filtrarValorFrete: function filtrarValorFrete() {\n      var _this2 = this;\n\n      // Filtrando para pegar somente a cidade selecionada.\n      var freteFiltrado = this.apiData.filter(function (frete) {\n        return frete.city === _this2.cidadeSelecionada;\n      });\n      console.log(freteFiltrado); // Definição do peso baseado no input.\n\n      this.peso = this.pesoTempoReal; // Função sort para menor preço, dividindo em pesos.\n\n      if (this.peso <= 100) {\n        freteFiltrado.sort(function (a, b) {\n          return a.cost_transport_light - b.cost_transport_light;\n        });\n        this.freteBarato = freteFiltrado[0];\n      } else if (this.peso > 100) {\n        freteFiltrado.sort(function (a, b) {\n          return a.cost_transport_heavy - b.cost_transport_heavy;\n        });\n        this.freteBarato = freteFiltrado[0];\n      } // Função sort para menor tempo.\n\n\n      freteFiltrado.sort(function (a, b) {\n        return a.lead_time - b.lead_time;\n      });\n      this.freteRapido = freteFiltrado[0];\n\n      if (!this.cidadeSelecionada || !this.peso) {\n        this.exibirAviso = true;\n      }\n\n      console.log(this.freteRapido);\n    },\n    // Método para formatar o custo total economico.\n    formatarCustoTotalEconomica: function formatarCustoTotalEconomica() {\n      var custoTotal;\n\n      if (this.peso <= 100) {\n        custoTotal = this.freteBarato.cost_transport_light * this.peso;\n        return custoTotal.toFixed(2);\n      } else if (this.peso > 100) {\n        custoTotal = this.freteBarato.cost_transport_heavy * this.peso;\n        return custoTotal.toFixed(2);\n      } // Método para formatar o custo total frete rápido.\n\n    },\n    formatarCustoTotalRapida: function formatarCustoTotalRapida() {\n      var custoTotal;\n\n      if (this.peso <= 100) {\n        custoTotal = this.freteRapido.cost_transport_light * this.peso;\n        return custoTotal.toFixed(2);\n      } else if (this.peso > 100) {\n        custoTotal = this.freteRapido.cost_transport_heavy * this.peso;\n        return custoTotal.toFixed(2);\n      }\n    },\n    // Método para fechar o aviso.\n    fecharAviso: function fecharAviso() {\n      this.exibirAviso = false;\n    },\n    // Método para limpar os resultados, junto com os valores inseridos pelo usuário no formulário.\n    limparFretes: function limparFretes() {\n      this.freteRapido = null;\n      this.freteBarato = null;\n      this.pesoTempoReal = null;\n      this.cidadeSelecionada = \"\";\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsHA;AAEA;AACAA;AACAC,oBADA;AAEAC;AAFA,GADA;AAKAC,MALA,kBAKA;AACA;AAEA;AACAC,sBADA;AAEAC,yBAFA;AAGAC,gBAHA;AAIAC,wBAJA;AAKAC,2BALA;AAMAC,iBANA;AAOAC,uBAPA;AAQAC,uBARA;AASAC;AATA;AAWA,GAnBA;AAoBAC,SApBA,qBAoBA;AAAA;;AACA;AACA,mDAFA,CAIA;;AACAC,kBACAC,IADA,CACA;AAAA;AAAA,KADA,EAEAA,IAFA,CAEA;AACA;AACA,2BAFA,CAIA;;AACA;;AACA;AACA;AACAC;AACA,2DACA,6DADA;AAGA,2DACA,6DADA;AAGA;AACA,OAhBA,CAiBA;;;AACA;AACA,KArBA,EAsBAC,KAtBA,CAsBA;AACAC;AACA,KAxBA;AAyBA,GAlDA;AAmDAC;AACA;AACAd,iBAFA,yBAEAe,QAFA,EAEA;AACA;AACA;AAJA,GAnDA;AA0DAC;AACA;AACAC,qBAFA,+BAEA;AAAA;;AACA;AACA,8CACA;AAAA;AAAA,OADA;AAGAJ,iCALA,CAMA;;AACA,qCAPA,CAQA;;AACA;AACAK,2BACA;AAAA;AAAA,SADA;AAGA;AACA,OALA,MAKA;AACAA,2BACA;AAAA;AAAA,SADA;AAGA;AACA,OAnBA,CAoBA;;;AACAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AACAL;AACA,KA9BA;AA+BA;AACAM,+BAhCA,yCAgCA;AACA;;AACA;AACAC;AAEA;AACA,OAJA,MAIA;AACAA;AAEA;AACA,OAVA,CAWA;;AACA,KA5CA;AA6CAC,4BA7CA,sCA6CA;AACA;;AACA;AACAD;AAEA;AACA,OAJA,MAIA;AACAA;AAEA;AACA;AACA,KAxDA;AAyDA;AACAE,eA1DA,yBA0DA;AACA;AACA,KA5DA;AA6DA;AACAC,gBA9DA,0BA8DA;AACA;AACA;AACA;AACA;AACA;AAnEA;AA1DA","names":["components","BNavbar","BNavbarBrand","data","appName","pesoTempoReal","peso","exibirAviso","cidadeSelecionada","cidades","freteBarato","freteRapido","apiData","created","fetch","then","cidadesUnicas","catch","console","watch","newValue","methods","filtrarValorFrete","freteFiltrado","formatarCustoTotalEconomica","custoTotal","formatarCustoTotalRapida","fecharAviso","limparFretes"],"sourceRoot":"src/components","sources":["BestTransport.vue"],"sourcesContent":["<template>\n  <div class=\"title\">\n    <b-navbar toggleable=\"lg\" type=\"dark\" variant=\"info\">\n      <b-navbar-brand class=\"ml-2\"> </b-navbar-brand>\n    </b-navbar>\n    <div class=\"dim\" v-if=\"exibirAviso\"></div>\n    <div class=\"grid\">\n      <div class=\"navfrete\">\n        <img class=\"logo\" src=\"../assets/logo.png\" />\n        <h1>{{ appName }}</h1>\n      </div>\n\n      <div class=\"formulario\">\n        <div class=\"form-group\">\n          <h2>\n            <img class=\"maplogo\" src=\"../assets/maplogo.svg\" /> Insira o destino\n            e o peso\n          </h2>\n          <label for=\"city\"><b>Cidade de destino:</b></label>\n          <!-- Seleção da cidade com o uso de v-model e v-for. -->\n          <select id=\"city\" class=\"form-control\" v-model=\"cidadeSelecionada\">\n            <option class=\"first-option\" disabled selected value=\"\">\n              Selecione o destino\n            </option>\n            <option v-for=\"city in cidades\" :key=\"city\">{{ city }}</option>\n          </select>\n        </div>\n        <div class=\"form-group\">\n          <!-- Uso de v-model para peso. -->\n          <label for=\"peso\"><b>Peso do frete:</b></label>\n          <input\n            type=\"number\"\n            id=\"peso\"\n            class=\"form-control\"\n            placeholder=\"Peso da carga em kg\"\n            v-model=\"pesoTempoReal\"\n          />\n        </div>\n        <button class=\"btn btn-primary\" @click=\"filtrarValorFrete\">\n          Analisar\n        </button>\n      </div>\n      <div class=\"resultados\">\n        <transition name=\"semDados\">\n          <div class=\"semDados\" v-if=\"!freteRapido && !freteBarato\">\n            <h2>Nenhum dado selecionado.</h2>\n          </div>\n        </transition>\n        <!-- Divisão com v-if para peso, e tipo de frete. -->\n        <transition>\n          <div class=\"valorFrete\" v-if=\"freteBarato && peso <= 100\">\n            <img src=\"../assets/freteBarato.svg\" />\n            <p><b>Frete com menor valor</b></p>\n            <p>Transportadora: {{ freteBarato.name }}</p>\n            <p>Tempo de entrega: {{ freteBarato.lead_time }} horas</p>\n            <p>\n              Custo total: <b>R${{ formatarCustoTotalEconomica() }}</b>\n            </p>\n          </div>\n        </transition>\n\n        <transition>\n          <div class=\"valorFrete\" v-if=\"freteBarato && peso > 100\">\n            <img src=\"../assets/freteBarato.svg\" />\n            <p><b>Frete com menor valor</b></p>\n            <p>Transportadora: {{ freteBarato.name }}</p>\n            <p>Tempo de entrega: {{ freteBarato.lead_time }} horas</p>\n            <p>\n              Custo total: <b>R$ {{ formatarCustoTotalEconomica() }}</b>\n            </p>\n          </div>\n        </transition>\n        <transition>\n          <div class=\"valorFrete\" v-if=\"freteRapido && peso > 100\">\n            <img src=\"../assets/freteRapido.svg\" />\n            <p><b>Frete mais rápido</b></p>\n            <p>Transportadora: {{ freteRapido.name }}</p>\n            <p>Tempo de entrega: {{ freteRapido.lead_time }} horas</p>\n            <p>\n              Custo total: <b>R${{ formatarCustoTotalEconomica() }}</b>\n            </p>\n          </div>\n        </transition>\n        <transition>\n          <div class=\"valorFrete\" v-if=\"freteRapido && peso <= 100\">\n            <img src=\"../assets/freteRapido.svg\" />\n            <p><b>Frete mais rápido</b></p>\n            <p>Transportadora: {{ freteRapido.name }}</p>\n            <p>Tempo de entrega: {{ freteRapido.lead_time }} horas</p>\n            <p>\n              Custo total: <b>R$ {{ formatarCustoTotalRapida() }}</b>\n            </p>\n          </div>\n        </transition>\n        <transition>\n          <!-- Botão para limpar os resultados. -->\n          <button\n            @click=\"limparFretes\"\n            class=\"limpar\"\n            v-if=\"freteRapido && freteBarato\"\n          >\n            Limpar\n          </button>\n        </transition>\n        <transition>\n          <!--  Aviso para caso dados não tenham sido inseridos pelo usuário. -->\n          <div v-if=\"exibirAviso\" class=\"aviso\">\n            <img src=\"../assets/warning.svg\" />\n            <h3>Insira os valores para realizar a análise.</h3>\n            <button @click=\"fecharAviso\">Fechar</button>\n          </div>\n        </transition>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { BNavbar, BNavbarBrand } from \"bootstrap-vue\";\n\nexport default {\n  components: {\n    BNavbar,\n    BNavbarBrand,\n  },\n  data() {\n    const appName = \"\";\n\n    return {\n      appName,\n      pesoTempoReal: null,\n      peso: null,\n      exibirAviso: false,\n      cidadeSelecionada: \"\",\n      cidades: [],\n      freteBarato: null,\n      freteRapido: null,\n      apiData: [],\n    };\n  },\n  created() {\n    this.appName = \"Melhor Frete\";\n    const apiUrl = \"http://localhost:3000/transport\";\n\n    // Fetch nos dados da API\n    fetch(apiUrl)\n      .then((response) => response.json())\n      .then((data) => {\n        // Armazenando o dataset em uma variável para utilização nos methods.\n        this.apiData = data;\n\n        // Retornando as cidades únicas para o objeto cidades e formatando os dados para tipo Float/Inteiro.\n        let cidadesUnicas = {};\n        for (let i = 0; i < data.length; i++) {\n          let obj = data[i];\n          cidadesUnicas[obj.city] = true;\n          this.apiData[i].cost_transport_light = parseFloat(\n            this.apiData[i].cost_transport_light.replace(/[^0-9.]/g, \"\")\n          );\n          this.apiData[i].cost_transport_heavy = parseFloat(\n            this.apiData[i].cost_transport_heavy.replace(/[^0-9.]/g, \"\")\n          );\n          this.apiData[i].lead_time = parseInt(this.apiData[i].lead_time);\n        }\n        // Pegando cidades únicas para valor do formulário.\n        this.cidades = Object.keys(cidadesUnicas);\n      })\n      .catch((error) => {\n        console.error(\"Erro ao obter dados do frete:\", error);\n      });\n  },\n  watch: {\n    // Ver as mudanças do peso em tempo real.\n    pesoTempoReal(newValue) {\n      this.pesoTempoReal = parseFloat(newValue);\n    },\n  },\n\n  methods: {\n    // Implemente aqui os metodos utilizados na pagina\n    filtrarValorFrete() {\n      // Filtrando para pegar somente a cidade selecionada.\n      const freteFiltrado = this.apiData.filter(\n        (frete) => frete.city === this.cidadeSelecionada\n      );\n      console.log(freteFiltrado);\n      // Definição do peso baseado no input.\n      this.peso = this.pesoTempoReal;\n      // Função sort para menor preço, dividindo em pesos.\n      if (this.peso <= 100) {\n        freteFiltrado.sort(\n          (a, b) => a.cost_transport_light - b.cost_transport_light\n        );\n        this.freteBarato = freteFiltrado[0];\n      } else if (this.peso > 100) {\n        freteFiltrado.sort(\n          (a, b) => a.cost_transport_heavy - b.cost_transport_heavy\n        );\n        this.freteBarato = freteFiltrado[0];\n      }\n      // Função sort para menor tempo.\n      freteFiltrado.sort((a, b) => a.lead_time - b.lead_time);\n      this.freteRapido = freteFiltrado[0];\n\n      if (!this.cidadeSelecionada || !this.peso) {\n        this.exibirAviso = true;\n      }\n      console.log(this.freteRapido);\n    },\n    // Método para formatar o custo total economico.\n    formatarCustoTotalEconomica() {\n      let custoTotal;\n      if (this.peso <= 100) {\n        custoTotal = this.freteBarato.cost_transport_light * this.peso;\n\n        return custoTotal.toFixed(2);\n      } else if (this.peso > 100) {\n        custoTotal = this.freteBarato.cost_transport_heavy * this.peso;\n\n        return custoTotal.toFixed(2);\n      }\n      // Método para formatar o custo total frete rápido.\n    },\n    formatarCustoTotalRapida() {\n      let custoTotal;\n      if (this.peso <= 100) {\n        custoTotal = this.freteRapido.cost_transport_light * this.peso;\n\n        return custoTotal.toFixed(2);\n      } else if (this.peso > 100) {\n        custoTotal = this.freteRapido.cost_transport_heavy * this.peso;\n\n        return custoTotal.toFixed(2);\n      }\n    },\n    // Método para fechar o aviso.\n    fecharAviso() {\n      this.exibirAviso = false;\n    },\n    // Método para limpar os resultados, junto com os valores inseridos pelo usuário no formulário.\n    limparFretes() {\n      this.freteRapido = null;\n      this.freteBarato = null;\n      this.pesoTempoReal = null;\n      this.cidadeSelecionada = \"\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Estilos aplicados no componente, em ordem de inserção no HTML. */\nhtml {\n  background-color: #f2f2f2;\n}\n\nh1 {\n  font-size: 32px;\n}\n\nh2 {\n  font-size: 28px;\n  margin-bottom: 30px;\n  color: #363636;\n}\n\nh3 {\n  font-size: 24px;\n}\n\nlabel {\n  margin-bottom: 10px;\n  color: #505059;\n}\n\nselect {\n  background-image: linear-gradient(45deg, transparent 50%, gray 50%),\n    linear-gradient(135deg, gray 50%, transparent 50%),\n    linear-gradient(to right, #ccc, #ccc);\n  background-position: calc(100% - 20px) calc(1em + 2px),\n    calc(100% - 15px) calc(1em + 2px), calc(100% - 2.5em) 0.5em;\n  background-size: 5px 5px, 5px 5px, 1px 1.5em;\n  background-repeat: no-repeat;\n}\n\nselect:focus {\n  background-image: linear-gradient(45deg, green 50%, transparent 50%),\n    linear-gradient(135deg, transparent 50%, green 50%),\n    linear-gradient(to right, #ccc, #ccc);\n  background-position: calc(100% - 15px) 1em, calc(100% - 20px) 1em,\n    calc(100% - 2.5em) 0.5em;\n  background-size: 5px 5px, 5px 5px, 1px 1.5em;\n  background-repeat: no-repeat;\n  border-color: green;\n  outline: 0;\n}\n\n.title .navbar {\n  background-color: #596c8a !important;\n}\n\n.title .navbar-brand {\n  margin-left: 20px;\n}\n.title {\n  height: 100vh;\n}\n.navbar {\n  height: 5vh;\n}\n\n.grid {\n  height: 80vh;\n  margin: 40px auto;\n  width: 1500px;\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  display: grid;\n  grid-template-rows: 1fr 14fr;\n  grid-template-columns: 1fr 2fr;\n  align-items: center;\n}\n\n.navfrete {\n  display: flex;\n  align-items: center;\n  grid-column: span 2;\n  font-weight: bolder;\n  color: white;\n  width: 100%;\n  height: 6vh;\n  background-color: #7195bf;\n  border-radius: 10px 10px 0px 0px;\n  align-self: start;\n}\n\n.navfrete h1 {\n  height: 30px;\n  color: black;\n}\n\n.navfrete h1,\n.logo {\n  margin-left: 40px;\n}\n.logo {\n  width: 50px;\n  height: 50px;\n}\n.maplogo {\n  width: 40px;\n  height: 40px;\n}\n.formulario,\n.resultado {\n  margin: 40px 20px;\n}\n\n.formulario {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  align-self: flex-end;\n  height: 90%;\n  width: 500px;\n  gap: 40px;\n  background: #f2f2f2;\n  border-radius: 10px;\n}\n\n.formulario input,\n.formulario select {\n  width: 400px;\n}\n\n.formulario button {\n  width: 200px;\n  background-color: #7195bf;\n  color: #363636;\n  font-weight: bolder;\n  border: none;\n}\n\n.resultados {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: column;\n  gap: 60px;\n  justify-self: center;\n}\n\n.valorFrete {\n  display: grid;\n  border-radius: 10px;\n  height: 150px;\n  width: 800px;\n  grid-template-columns: 1fr 4fr;\n  grid-template-rows: auto;\n  background-color: #5e6c89;\n  background-image: linear-gradient(\n    to right,\n    rgba(0, 0, 0, 0) 20%,\n    #e2e2e2 20%\n  );\n}\n\n.valorFrete img {\n  grid-column: 1;\n  grid-row: span 4;\n  justify-self: center;\n  align-self: center;\n}\n\n.valorFrete p {\n  justify-self: center;\n  align-self: center;\n  grid-column: 2;\n  height: 20px;\n}\n\n.valorFrete b {\n  font-size: 20px;\n}\n\n.aviso {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  background-color: #fff;\n  border-radius: 10px;\n  gap: 30px;\n  flex-direction: column;\n  width: 750px;\n  height: 375px;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;\n  z-index: 5;\n}\n\n.aviso button {\n  width: 200px;\n  height: 30px;\n  background-color: #7195bf;\n  color: #363636;\n  font-weight: bolder;\n  border: none;\n  border-radius: 5px;\n}\n\n.first-option {\n  color: gray;\n}\n\n.v-enter-active {\n  transition: opacity 3s;\n}\n\n.v-leave-active {\n  transition: opacity 0.5s;\n}\n\n.v-enter,\n.v-leave-to {\n  opacity: 0;\n}\n\n.semDados-enter {\n  opacity: 0;\n}\n\n.semDados-enter-active {\n  transition: opacity 7s;\n}\n\n.dim {\n  height: 100%;\n  width: 100%;\n  position: fixed;\n  left: 0;\n  top: 0;\n  z-index: 1 !important;\n  background-color: rgba(0, 0, 0, 0.2);\n}\n\n.limpar {\n  width: 200px;\n  height: 30px;\n  background-color: #626c88;\n  color: #363636;\n  font-weight: bolder;\n  border: none;\n  border-radius: 5px;\n  align-self: flex-end;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}